#include "dll.h"

/*Given a reference (pointer to pointer) to the head of a list
   and an int, inserts a new node on the front of the list.
void push(struct Node** head_ref, int new_data)
{
     1. allocate node
    struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));

     2. put in the data
    new_node->data  = new_data;

     3. Make next of new node as head and previous as NULL
    new_node->next = (*head_ref);
    new_node->prev = NULL;

     4. change prev of head node to new node
    if((*head_ref) !=  NULL)
      (*head_ref)->prev = new_node ;

    /5. move the head to point to the new node
    (*head_ref)    = new_node;
}*/

void push(struct Node** headRef, int_least32_t newData)
{
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

	newNode->data = newData;

	newNode->next = headRef;
	newNode->previous = NULL;

	if((*headRef) != NULL)
		(*headRef)->previous = newNode;

	(*headRef) = newNode;

}

/* Given a node as prev_node, insert a new node after the given node
void insertAfter(struct Node* prev_node, int new_data)
{
    1. check if the given prev_node is NULL
    if (prev_node == NULL)
    {
        printf("the given previous node cannot be NULL");
        return;
    }

     2. allocate new node
    struct Node* new_node =(struct Node*) malloc(sizeof(struct Node));

     3. put in the data
    new_node->data  = new_data;

     4. Make next of new node as next of prev_node
    new_node->next = prev_node->next;

     5. Make the next of prev_node as new_node
    prev_node->next = new_node;

     6. Make prev_node as previous of new_node
    new_node->prev = prev_node;

     7. Change previous of new_node's next node
    if (new_node->next != NULL)
      new_node->next->prev = new_node;
}*/

void insertAfter(struct Node* prevNode, int_least32_t newData)
{
	if(prevNode == NULL)
	{
		printf("The given prevNode cannot be NULL!\n");
		return;
	}

	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

	newNode->data = newData;

	newNode->next = prevNode->next;

	prevNode->next = newNode;

	newNode->previous = prevNode;

	if(newNode->next != NULL)
		newNode->next->previous = newNode;
}

/* This function prints contents of linked list starting from the given node
void printList(struct Node *node)
{
    struct Node *last;
    printf("\nTraversal in forward direction \n");
    while (node != NULL)
    {
        printf(" %d ", node->data);
        last = node;
        node = node->next;
    }

    printf("\nTraversal in reverse direction \n");
    while (last != NULL)
    {
        printf(" %d ", last->data);
        last = last->prev;
    }
}*/

void printList(struct Node* node)
{
	struct Node* last;
	printf("\nTraversal in forward direction \n");

	while(node != NULL)
	{
		printf(" %d ", node->data);
		last = node;
		node = node->next;
	}
}
